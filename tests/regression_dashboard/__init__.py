"""
Dashboard to visualize the content of regression files
"""
import json
import yaml

from flask import Flask, render_template, abort
import plotly.graph_objects as go
import plotly.io as pio

from gemz import models
from gemz.cases import get_cases
from gemz.plots.plotly_template import template as plotly_template

app = Flask(__name__)

@app.route('/')
def index():
    """
    List of regression cases
    """
    case_names = list(get_cases())
    return render_template('index.html', cases=case_names)

def encode_case_id(case_id):
    """
    Make a case id string suitable for use in urls and cie
    """
    return case_id.replace(' ', '_').replace('/', '_')

def list_subcases(case):
    return [{
        'id': case_id,
        'id_enc': encode_case_id(case_id),
        'spec': json.dumps(case_params, indent=4),
        }
        for case_id, case_params in case.get_params()
        ]

@app.route('/case/<case_name>')
def _case(case_name):
    """
    Display a specific regression case
    """
    cases = get_cases()

    case = cases.get(case_name)
    if case is None:
        abort(404)

    return render_template('case.html', case=case_name,
            subcases=list_subcases(case),
            cases=list(cases))

@app.route('/model/<case_name>/<path:case_id_enc>')
def _model(case_name, case_id_enc):
    cases = get_cases()
    case = cases[case_name]

    # Fixme: this path is generated by pytest-regression, this is a duplicate of
    # the logic
    path = (
            'tests/test_regressions/' + 
            (f'test_case_{case_id_enc}_.yml'
                if case_id_enc != 'all' # compat
                else f'test_case_{case_name}_.yml'
                )
            )
    with open(path, encoding='utf8') as ifd:
        report = yaml.load(ifd, yaml.CLoader)


    figs = [
            pio.to_html(
                (
                    go.Figure(fig_dict)
                    .update_layout(template=plotly_template)
                    ),
                full_html=False, include_plotlyjs='cdn')
            for fig_dict in report['figures']
            ]
    case_params = None
    case_id = None

    # FIXME: should be stored and loaded from the file
    # FIXME 2: that doesn't work with all Case subclasses
    for pot_case_id, pot_case_params in case.get_params():
        if encode_case_id(pot_case_id) == case_id_enc:
            case_id = pot_case_id
            case_params = pot_case_params

    # FIXME: we want to print the same thing than in '_case' here
    # spec = cases[case_name].model_unique_names[model_name]

    return render_template('model.html', case_id=case_id, case_name=case_name,
            cases=list(cases), spec=json.dumps(case_params, indent=4),
            figures=figs,
            subcases=list_subcases(case),
            )
