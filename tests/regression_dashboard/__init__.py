"""
Dashboard to visualize the content of regression files
"""
import json
import yaml

from flask import (
        Flask, render_template, abort, request, url_for
        )
import plotly.graph_objects as go
import plotly.io as pio

from gemz import models
from gemz.cases import get_cases
from gemz.plots.plotly_template import template as plotly_template

app = Flask(__name__)

@app.route('/')
def index():
    """
    List of regression cases
    """
    case_names = list(get_cases())
    return render_template('index.html', cases=case_names)

def encode_case_id(case_id):
    """
    Make a case id string suitable for use in urls and cie
    """
    return case_id.replace(' ', '_').replace('/', '_')

def dump_pydoc(doc):
    """
    Pre-formatted json dump of an object with fallbakc to python repr for
    non-json types
    """
    return json.dumps(doc, indent=4, default=repr)

def list_subcases(case, active_case_id=None):
    return [{
        'id': display_id or '(no name)',
        'id_enc': encode_case_id(display_id),
        'url': url_for('_model', case_name=case.name, **{
            param['name']: param['value'] for param in combination
            }),
        'spec': dump_pydoc(combination),
        'active': display_id == active_case_id
        }
        for combination, display_id in case.get_param_combinations()
        ]

def list_related_subcases(case, active_case_params=None):
    """
    More navigable version of subcases
    """
    return [
            {
                'name': param_def['display_name'],
                'active': active_case_params[param_name],
                'related': [
                    {
                        'url': url_for('_model', case_name=case.name, 
                            **(active_case_params | { param_name: param_value })
                            ),
                        'active': param_value == active_case_params[param_name],
                        'value': param_value
                    }
                    for param_value in param_def['values']
                    ]
                }
            for param_name, param_def in case.parameters.items()
        ]

@app.route('/case/<case_name>')
def _case(case_name):
    """
    Display a specific regression case
    """
    cases = get_cases()

    case = cases.get(case_name)
    if case is None:
        abort(404)

    return render_template('case.html', case=case_name,
            subcases=list_subcases(case),
            cases=list(cases))

@app.route('/model/<case_name>')
def _model(case_name):
    cases = get_cases()
    case = cases[case_name]

    case_params = dict(request.args) # TODO: validate
    subcase_id = case.get_display_id(case_params)
    subcase_id_enc = encode_case_id(subcase_id)

    # Fixme: this path is generated by pytest-regression, this is a duplicate of
    # the logic
    path = (
            'tests/test_regressions/' + 
            (f'test_case_{case_name}_{subcase_id_enc}_.yml'
                if subcase_id_enc  # compat
                else f'test_case_{case_name}_.yml'
                )
            )
    with open(path, encoding='utf8') as ifd:
        report = yaml.load(ifd, yaml.CLoader)


    figs = [
            pio.to_html(
                (
                    go.Figure(fig_dict)
                    .update_layout(template=plotly_template)
                    ),
                full_html=False, include_plotlyjs='cdn')
            for fig_dict in report['figures']
            ]

    return render_template('model.html', case_id=subcase_id, case_name=case_name,
            cases=list(cases),
            spec=dump_pydoc(case_params),
            figures=figs,
            case_params=list_related_subcases(case, case_params)
            )
